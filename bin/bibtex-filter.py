#!/usr/bin/env python
"""Filter and sanitize a bibtex file for an article:
* Remove all uncited entries,
* Remove all annotations and comments.
"""
from __future__ import absolute_import, division, print_function, unicode_literals
from future_builtins import *  # ascii, filter, hex, map, oct, zip

import argparse
import os
from pybtex.database import BibliographyData
from pybtex.database.input import bibtex as bibtex_input
from pybtex.database.output import bibtex as bibtex_output
import re
import sys


def parse_aux(args):
    wanted = set()
    with open(args.input_aux) as f:
        for line in f:
            line = line.strip()
            m = re.match(r'^\\citation\{([a-zA-Z0-9]+)\}$', line)
            if m:
                wanted.add(m.group(1))
    return wanted


def input_bibtex_filenames(args):
    # In order: later files take precedence.
    filenames = []
    if args.input_bibtex_directory:
        for bibfile in os.listdir(args.input_bibtex_directory):
            if args.include_reading_group or not bibfile.startswith('Reading group'):
                filenames.append(os.path.join(args.input_bibtex_directory, bibfile))
    if args.input_bibtex:
        filenames.append(args.input_bibtex)
    return filenames


def parse_bibtex(args, wanted):
    if wanted != None:
        bibs = BibliographyData(wanted_entries=wanted)
    else:# Because Ubuntu/Debian doesn't have a new enough pybtex for wanted_entries
        bibs = BibliographyData()
    parser = bibtex_input.Parser()
    for filename in input_bibtex_filenames(args):
        filebibs = parser.parse_file(filename)
        bibs.add_entries(filebibs.entries.iteritems())
    return bibs


def delete_notes(bibs):
    for entry in bibs.entries.itervalues():
        if 'annote' in entry.fields:
            del entry.fields['annote']


def make_online(bibs):
     """Mendeley does not support @online entries but biblatex does
        So if an entry is @misc and has a url then make it @online
     """
     for entry in bibs.entries.itervalues():
         if (entry.type == u'misc' and entry.fields.has_key(u'url')):
             entry.type = u'online'


def write_output(args, bibs):
    writer = bibtex_output.Writer()
    writer.write_file(bibs, args.output_bibtex)


def main(args):
    if args.input_aux:
        wanted = parse_aux(args)
        print('Looking for {} citations: {}'.format(len(wanted), ', '.join(sorted(wanted))), file=sys.stderr)
    else:
        wanted = None # This means wanted = All
        print('Keeping all citations as --input-aux not specified', file=sys.stderr)
    bibs = parse_bibtex(args, wanted)
    delete_notes(bibs)
    make_online(bibs)
    write_output(args, bibs)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--input-bibtex-directory', help='Directory with .bib files generated by Mendeley.')
    parser.add_argument('--input-bibtex', help='A single .bib file generated by Mendeley.')
    parser.add_argument('--include-reading-group', action='store_true', help='Include files generated by Reading Group in Mendeley.')
    parser.add_argument('--input-aux', help='Latex .aux file of the article (it contains required citations).')
    parser.add_argument('--output-bibtex', help='Output file where to write filtered entries.', required=True)
    args = parser.parse_args()

    if not args.input_bibtex_directory and not args.input_bibtex:
        parser.error('Either --input-bibtex or --input-bibtex-directory (or both) is required.')

    if ((args.input_bibtex and args.input_bibtex == args.output_bibtex) or
        (args.input_bibtex_directory and args.output_bibtex.startswith(args.input_bibtex_directory))):
        parser.error('Output file must not be the same as any of the input files.')

    main(args)

